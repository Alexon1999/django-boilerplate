include: ".ci-templates.yml"

stages:
  - test
  - build-image
  - generate-client
  - publish-client
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .pip-cache/

test:
  stage: test
  extends:
    - .environment-django-ci
  script:
    # if no tests found, convert exit code 5 to 0
    - pytest --cov=. --cov-report html --cov-report term  || [ $? -eq 5 ]
  artifacts:
    paths:
      - htmlcov/

# build and push docker image to registry
build-push-image:
  stage: build-image
  extends:
    - .build-kaniko
  variables:
    IMAGE_NAME: boilerplate/api
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    DOCKERFILE_PATH: "Dockerfile"
    DOCKER_BUILD_ARGS: ""

# deploy to server
deploy:
  stage: deploy
  image: ubuntu:latest
  variables:
    IMAGE_NAME: boilerplate/api
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  before_script:
    # docker login
    - echo "$REGISTRY_PASSWORD" | docker login $REGISTRY_URL -u "$REGISTRY_USER" --password-stdin
  script:
    - which ssh-agent || ( apt update -y && apt install openssh-client -y )
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo 'echo "$SSH_KEY_PASSPHRASE"' > ~/.ssh/.print_ssh_password
    - chmod 700 ~/.ssh/.print_ssh_password
    - chmod +x ~/.ssh/.print_ssh_password
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=":0.0" SSH_ASKPASS=~/.ssh/.print_ssh_password setsid ssh-add - > /dev/null
    - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh $SSH_USER@$SSH_HOST "echo 'Deploying to server'"
    - ssh $SSH_USER@$SSH_HOST "rm -rf /tmp/$SSH_APP_PATH" || true
    - ssh $SSH_USER@$SSH_HOST "mv $SSH_APP_PATH /tmp" || true
    - ssh $SSH_USER@$SSH_HOST "mkdir -p $SSH_APP_PATH"
    - scp -r ./* $SSH_USER@$SSH_HOST:$SSH_APP_PATH
    # ENV_TESTING contains sensitive information, so we don't want to commit it to the repo
    - echo "$ENV_TESTING" > $CI_PROJECT_DIR/.env.testing
    - scp $CI_PROJECT_DIR/.env.testing $SSH_USER@$SSH_HOST:$SSH_APP_PATH/.env.testing
    - ssh $SSH_USER@$SSH_HOST "cd $SSH_APP_PATH && IMAGE_NAME=$IMAGE_NAME IMAGE_TAG=$IMAGE_TAG REGISTRY_URL=$REGISTRY_URL docker compose -f docker-compose.testing.yml up -d --build"
    # check if the app is running
    - ssh $SSH_USER@$SSH_HOST "curl -s http://localhost:8000/healthcheck | grep -q 'OK'"
  only:
    - main
