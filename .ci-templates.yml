.on-main:
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"
      when: always

.on-release:
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release\\/.*$/"
      when: always

.build-kaniko:
  allow_failure: false
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo "{\"auths\":{\"$REGISTRY_URL \":{\"username\":\"$REGISTRY_USER\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context . --dockerfile $DOCKERFILE_PATH --destination $REGISTRY_URL/$IMAGE_NAME:$IMAGE_TAG $DOCKER_BUILD_ARGS
  variables:
    DOCKERFILE_PATH: Dockerfile
    DOCKER_BUILD_ARGS: ""

.environment-django-ci:
  image: python:3.9.17-slim-bullseye
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: boilerplate
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script:
    - apt-get update && apt-get install -y build-essential netcat
    - pip install --upgrade pip --cache-dir="$PIP_CACHE_DIR"
    - pip install --cache-dir="$PIP_CACHE_DIR" -r requirements.txt
    - echo "$ENV_CI" > .env
    - chmod +x ./scripts/loadenv.sh
    - source ./scripts/loadenv.sh .env

.deploy-environment:
  image: ubuntu:latest
  environment:
    name: $ENVIRONMENT
    url: $ENVIRONMENT_URL
  variables:
    SSH_CMD: "ssh -p $SSH_PORT $SSH_USER@$SSH_HOST"
    SCP_CMD: "scp -P $SSH_PORT"
  script:
    # Echo environment variables
    - echo "$ENVIRONMENT on $ENVIRONMENT_URL using $SSH_USER - $SSH_HOST - $SSH_PORT"
    - echo "$API_IMAGE_NAME:$API_IMAGE_TAG $WEB_API_IMAGE_NAME:$WEB_API_IMAGE_TAG"

    # Setup SSH
    - which ssh-agent || ( apt update -y && apt install openssh-client -y )
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo 'echo "$SSH_KEY_PASSPHRASE"' > ~/.ssh/.print_ssh_password
    - chmod 700 ~/.ssh/.print_ssh_password
    - chmod +x ~/.ssh/.print_ssh_password
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=":0.0" SSH_ASKPASS=~/.ssh/.print_ssh_password setsid ssh-add - > /dev/null
    - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - $SSH_CMD "echo 'Deploying to server'"

    # Preparing the server
    - $SSH_CMD "cd $SSH_APP_PATH && docker compose -f docker-compose.$ENVIRONMENT.yml down || true"
    - $SSH_CMD "rm -rf /tmp/app || true && mkdir -p /tmp/app && mv $SSH_APP_PATH /tmp/app || true"
    - $SSH_CMD "rm -rf $SSH_APP_PATH && mkdir -p $SSH_APP_PATH"

    # Copy necessary files
    - $SCP_CMD $CI_PROJECT_DIR/docker-compose.$ENVIRONMENT.yml $SSH_USER@$SSH_HOST:$SSH_APP_PATH
    - echo "$ENV_FILE" > .env
    - $SCP_CMD .env $SSH_USER@$SSH_HOST:$SSH_APP_PATH

    # Set up environment variables on the server
    # put REGISTRY_URL, images, tags in the .env file
    - $SSH_CMD "echo \"REGISTRY_URL=$REGISTRY_URL\" >> $SSH_APP_PATH/.env"
    - $SSH_CMD "echo \"API_IMAGE_NAME=$API_IMAGE_NAME\" >> $SSH_APP_PATH/.env"
    - $SSH_CMD "echo \"API_IMAGE_TAG=$API_IMAGE_TAG\" >> $SSH_APP_PATH/.env"
    - $SSH_CMD "echo \"WEB_API_IMAGE_NAME=$WEB_API_IMAGE_NAME\" >> $SSH_APP_PATH/.env"
    - $SSH_CMD "echo \"WEB_API_IMAGE_TAG=$WEB_API_IMAGE_TAG\" >> $SSH_APP_PATH/.env"

    # Docker login and start containers
    - $SSH_CMD "echo \"$REGISTRY_PASSWORD\" | docker login $REGISTRY_URL -u \"$REGISTRY_USER\" --password-stdin"
    - $SSH_CMD "cd $SSH_APP_PATH && docker compose -f docker-compose.$ENVIRONMENT.yml up -d --build"

    # Health check
    - $SSH_CMD "curl -s http://localhost:8000/healthcheck | grep -q 'OK'"
